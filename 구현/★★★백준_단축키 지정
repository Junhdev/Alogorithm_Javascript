function solution() {
    // 1. 입력 잘 받아오기
    let input = [['N','e','w'],['O','p','e','n'],['S','a','v','e'],['s','a','v','e',' ','A','s'],['S','a','v','e',' ','A','l','l']]
    let stack = [];
    let flag = 0;
    stack.push(input[0][0])
    input[0][0] = '[' + input[0][0] + ']'
    for(let i=1; i<input.length; i++){
        for(let j=0; j<input[i].length; j++){
                // 일단 크게 나누기
                // 1. 한 배열 안에 공백이 존재하는 경우
                if(input[i].includes(' ')){
                    // 단어의 첫글자들 확인
                    // 첫글자가 단축키면 [] & stack에 push
                    // 단축키가 아니면 처음부터 for문 돌려가며 확인
                
                    // 문제에서 <1. 먼저 하나의 옵션에 대해 왼쪽에서부터 오른쪽 순서로 단어의 첫 글자가 이미 단축키로 지정되었는지 살펴본다. 만약 단축키로 아직 지정이 안 되어있다면 그 알파벳을 단축키로 지정한다.>
                    // 1-1) 첫글자가 단축키 조건을 만족하는 지 확인
                    if(!stack.includes(input[i][0].toLowerCase()) && !stack.includes(input[i][0].toUpperCase())){
                        stack.push(input[i][0]);
                        input[i][0] = '[' + input[i][0] + ']'
                        break;
                    }
                    // 1-2) 만족하지 않는다면 다음 단어의 첫글자 탐색
                    else if(input[i][j] === ' '){
                        // 공백 다음 단어 탐색
                        // 단축기 조건 만족하는 경우만 입력
                        if(!stack.includes(input[i][j+1].toLowerCase()) && !stack.includes(input[i][j+1].toUpperCase())){
                            stack.push(input[i][j+1])
                            input[i][j+1] = '[' + input[i][j+1] + ']'
                            // 배열안에서 단축키 설정 완료 -> 더이상 진행 안되게 하기 위해
                            flag = 1;
                            break;
                        }
                    }
                }
                // 문제 조건 <2. 만약 모든 단어의 첫 글자가 이미 지정이 되어있다면 왼쪽에서부터 차례대로 알파벳을 보면서 단축키로 지정 안 된 것이 있다면 단축키로 지정한다.>
                // 2-1) 공백이 존재하지 않는 경우일때 그냥 왼쪽에서부터 차례대로 탐색
                if(!input[i].includes(' ')){
                    if(!stack.includes(input[i][j].toLowerCase()) && !stack.includes(input[i][j].toUpperCase())){
                        stack.push(input[i][j])
                        input[i][j] = '[' + input[i][j] + ']'
                        break;
                        
                    }
                }
        }

        // 위 2중 for문이 끝난 결과에 이어
        // 2-2) 공백이 있을때 모든 단어의 첫글자가 이미 지정이 되어있다면
        for(let k=0; k<input[i].length; k++){
            // 단축키 조건 만족하지 못했다는 걸 알려주는 표시 flag === 0 && 공백은 단축키 X(디버깅으로)
            if(input[i].includes(' ') && flag === 0 && input[i][k] !== ' '){
                if(!stack.includes(input[i][k].toLowerCase()) && !stack.includes(input[i][k].toUpperCase())){
                    stack.push(input[i][k])
                    input[i][k] = '[' + input[i][k] + ']'
                    break;
                }
            }
        }
        // 한 배열에 대해 탐색 끝난 후 flag 표시 = 0
        flag = 0
    }
    // 배열안의 원소들을 한줄 띄어서 문자열로 변환 -> 컴마 없애기 : replace로
    let answer = input.join('\n').replace(/,/g,"")
    return answer; 
}

    console.log(solution())